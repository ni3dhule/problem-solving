package com.problem.solving.hackerrank;

import org.junit.Test;
import org.junit.jupiter.api.Assertions;

public class CountingValleyTest {
    @Test
    public void getValleyCountTest0() {
        String path = "UDDDUDUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 1;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest1() {
        String path = "DDUUDDUDUUUD";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 2;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest2() {
        String path = "UDUUUDUDDD";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 0;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest3() {
        String path = "DUDDDUUDUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 2;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest4() {
        String path = "DDUDDUUDUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 1;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest5() {
        String path = "UDDDUDUDUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 1;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest6() {
        String path = "DUDUUUUUUUUDUDDUUDUUDDDUUDDDDDUUDUUUUDDDUUUUUUUDDUDUDUUUDDDDUUDDDUDDDDUUDDUDDUUUDUUUDUUDUDUDDDDDDDDD";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 2;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest7() {
        String path = "DDUUDDDUDUUDUDDDUUDDUDDDUDDDUDUUDDUUDDDUDDDUDDDUUUDUDDDUDUDUDUUDDUDUDUDUDUUUUDDUDDUUDUUDUUDUUUUUUUUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 2;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest8() {
        String path = "DDUDUDDUDDUDDUUUUDUDDDUUDDUUDDDUUDDUUUUUUDUDDDDUDDUUDUUDUDUUUDUUUUUDDUDDDDUDDUDDDDUUUUDUUDUUDUUDUDDD";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 5;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest9() {
        String path = "UDUDDUUUDUDUDUUDUUDDDDDUDUDDDDUUDDUDDUUUUDUUDUDDDDUDUDUUUDDDUUUDUDDUUDDDUUDDUDDDUDUUDUUDUUDUDDDUUUUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 6;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest10() {
        String path = "UDDDUUDUUDDDDUUDDUDDDUUDDDUUDDUUDUDUDDDDUUDDDDDDUUUDUDUDUUDUUUUUUUUUUUDUUUUUDUDUDUDDDDUUDUUUDDDDDUUDUUDUUUUUUDDDDDUUDUUDDDUDUUUUUUUDUUUUDDUDDDDDUUUDDUUUUUUUDDDDUUUDUUUDUUUUUUUDDUUUDDDDUUDUDDDUDDDDUUDDDDDUUDUDDUDUUUDDUDUDDDUUDDUDUUUUUDDUUUDUUUUUUDDUDUUDDUUDDDUDUDDDDUDUDDUUUDDDUDDUDDUUUUDDDUDUDDDUUUUUDUUUDDUDUUDUUUDDUDUUUDUDUDUUUUDDUDDDUUUDDDUDUDDDDDDDUUUUDDUUDUUUDUDUDUDDUUUDDUDUDDUDDUDDDUDUDUDDUUDDDUUDUUDUDDDDDDDDUUDDUUDDUUUUUUDUUUDDUUDUDDUUDDDUDDUUUUUDUDUDDDUUUDDUUDDDUDUUDUUDDDUDDUUDUUUDDUUUUDUUUDDDDUDUUUDDUDDDDDDDUDDDUUDUDDUDUDUUDUDDUUDUUDUUDUUDUDDDUUDDUUUUDUUDUUDUUUUDUUUDDUUUDDUDUDDUDUDUUUDUDDDUUUUDUUDUUUDDUUDUDUDDDDUDUDDDDDUUUDUUUDUDDUUUDUUUUDDUUUDDDUDUDUUDUUUUUDUUDDDUUDDUDDDDUUUDUUUUUDDUUUUUDDUUDUDDUDUDUUUUDUUDUUUDUUDDDUUUUDDDUDUDUUDUDUUDDDUDDUUDDUDUDUUDUDUDDDUDDDUDDDDUDUUUUUDUDUDUUDUUDUDDUDUUDDUUDUDUDDDDUDDUDDUDDUUUUDUDDUUUUDUUDUDDUDDDUDUUUDUDUDUDDDUDDUUUUDDUDUDUDDUDDDUDDDUUUDUDUDUUDUUUUUDUDDDDUUDDDDUDUDDUDDDDUUUDUDUUDUDUUUDDUDUDDDDDUUDUDUUDDDDUUDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 3;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest11() {
        String path = "UUUUDUUDDDDDUUUDDUUDUDDDUUDUDUDDUDUDDUUUDDDUDDUDDDDDUUUDDUUDDDDDDDDDDDUUDDDDDDUUUUDUDUDDDDUDUDUUUDUDDDDUUDDDDDDDUUUUUUUDDUUUUUDUUUDUDUDDDDUUDDUDDDDDUDUDUDDDDUUDUDUDDUUDDDDDUDDUUUUDDDUUUDUUUUDUUDUDUDUUDUUDDDUDDUDDDDDDDUUDDUDDDDDUDUDDDUUDUDUDDUUUUUUDDUDDDDUDUDDDUDDDUUUUDDDDDDDUUDDDDUDUDUDDUUDDUUDUUDUUDDDUUUDDDDUDDDUDUDUDUUUDUDUDUDUUUUDDDUUDUUUUDUUDDUUDUDUDDUDDDDUUDDDDUDDUUUDUUDUDDDUUUDUUDDDUDUDUUDUUUUUDDDUUUUUDDDUUDDUDDDUUUUUUUUDDDUUDUDUUDUUDUDUUDDDDDUUUUDUDDUUUDUDDDDUUDUUUDUUUDDDDUUDDUUDUUUDDUDDUDDUDDUUDDDUDUUUUUUUDDDUDUDDUUUUUDDUDUDDDDDUDDDUDUDUDDDDDDDDUUDDUDUUUUDUUUDUUDDUUUDDDUUDUUDDUDUDDUUUUUUUDDUDDUDUDDDUUDUUUDDUUDDDDUUUUUDDUUDDDUUUDDDUUDDDDDUDUUUDDUDUDDUDDUUDDDDDUUUUDUDUUUUUUDUUDUUUDDUUUUUUDDDDUDUDUUDUDDDUUDDDUUUUUDDDDDUDUDDDDDUUDDDUDUUUDDDUUUUDDUUUUUUUDUDDUUDDUDDDDDDDDDDDUDUDUUDDDDUDUUUDUDUUDUUUDDDDDUUDUDUUUDDUDUUUUDDUUDDUDDUDUUUDDUDUUDUDUUDDDDDDUUDUDDDUUUUDDDDUUUUUDDUUUDUUDUUDUUUUDDUDDUDDUDUUUDDUDDDDDUUDDUDUUDUUDUUDUDUUDDUUDUDUUUUDUUDDDDUUDDUUDUUUDDUUUDUDDUUUUUUUUUUUUUUUUUUUUUUUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 3;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest12() {
        String path = "DUDUUDUUUUUUDDDDDUDDUUUDUUUDDDUUUDDUDDDDUDDDDDUUDUDUDUDDDDUUDDUDDUUUUDDUUUUDUUDUUDUUUUDDDUDDUUUUDUDDDUUDUDUUDDUUUDUDDDUDUDUDUDUUUDUUUUUUDUDDDDDUDUDDDDUUUUUDUDUUUUUUUUDDDUUDUUDUDUDDDDDUDDDUDUUUDUDDDUDUUDUUDDDDDDDUDUDUUUDUDDUDUUDUDDDUUUDUDDDDUDDUDDUDUDUUDUDDDUDUUUDUUDUUUUUUUDUUUUUUUDDDDDUDDDUUUDDDUDDDUDDUUDDUUUDUUDDDUDUUDUUUDDUDDDDUUUUUUDUDUUDDDDUDUDDUUUDUDUUDDUUDDDUUDUUUUUDDUUDDDDUUUDUDUUDDUUDDUUDUDDDUDUDUDDUUDUDDUDUDDUUUDUDDUDDUUDUUDUDDDDDDDDDUDDUUDDUUUUDDUDUUDUUDUUDDDDUUUDUDDDDUDDUUDUDUDUUDDUUDUDUDDDDDUUUDDDDUDDDUUDDUUDDUUUDUDDDUDDDDDUUDUUUDDUDDDDUUUDDDDUUDDUUUDUUUDDUDUUUDUDDUUUDDDDDDDUUDDUDDUUUUUUDDDDUDDUDDUDDUDDDDDUUDDUDDDUDDUDUDDDUDUDUUDDUUDDDDUUDDUUUDUUDDDDDDUDUDDUDUUDDUDDDUUUUDDUUDUDDDDUUUDUUUUDDUDUUUDDUDUUUUUUDUUDDDDDUDDUDUDDDUDDDDUDUUUDUDUUDDUDDDUDUUDDDDDDDDUDUUDUDDUDDUDUUUDDDUDUDDUUUDUDUDDDUDDUDUUUDUDDDDDUDDDDDDUDUUUUDDUDDDUDDDUDUDUUUDDUDDUDDUUDDUDUDUDUUUUUDUUDDUUDUUDUUUDUDUDDUDDDUUDDDDUUDDUUUUDUUDUUUDDDDDUDDDDDUUUDDUUUDUUUDUUDUUUDUDUUDUDDUUUUUDUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 10;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
    @Test
    public void getValleyCountTest13() {
        String path = "DDDUUUUUDDDUUDUDDDUUDUUDDDUUDDDDDUDDUUDUDDUDUDDUDDDUDUUDUDUDDUDDDDDDDUUUUUUUUDUUDUUUUDUDDDUDDUUDUDDUDUDUUUUUUDUDDDDDDUDDDUUUDDUDDUDDUUUUDDDDUDUUUUUDUUDUDDUUUDUUUDDUDDDDUUUUDDDDDDUUUUDDDDUDDUUDDDDUUDUDDUUDUUUDUUUUDDUDDDDUUDUDDDDDUDUDUDUUDDUDUDDUDDDDUDUDUDUUUDDDDDUUUDDDUDDDUDDDDUDUDUDDUDDDDDDUDUDUDDDDDDUUUDDDUDUUDDDDUDUDDDDDUDDUUDUDDDDUDDDUUUUUDUDDUDUUDUDDDDUUUUDDDUDUUUUUUUDUUDDDUDUDDDDUDDUUDDDDDUDDUUUUDUUDUDDUDUUDDUUUDUUUUDDUUUUDDUUDUUUDUDUUUDUDDUDDDUDUUUUUUUUUUUDUDDUDDDDDUUDUDDUDDUDUDUUDDDDUUUDDUDDUDDUUDUUUDUDUUUUUDDUUDUUDUDDUDUUUUUUDDDDUUUDDUDUUUUUUUDDUUDDUUUUUDDUUDUUUDDUDUDUUDDDUDUUUUUUUDUUUUDDUDDDUDUUDUDDDUDUUUDUUUDDDUDDUUUUUDUUDDDDDDUUDDUDUDDUDUDUDDUDUDUUUDUDUUDUDUUDUDUDDDDUUUUDDDUUDUUDDUDUDUUDUDUUUDDUUUDUDUDDDUDDUUUDUDUUUDDUDUDUDDUUDDDDUUUUUDUDUUDUDUUDDDDUDDDUDUUUUUDDDUDDDDUUDDUUDUUUUUUDDUUDDUUUUUUUDUDDUDDDDDDDUDDDDUDUDUDUUDUDDDUDUUUUDDUUUDUDUDUUDDDDDUUUUUUDUDDUDUDDUDDUDUUDUDUUUUUDUDDDDUUUDDUUDDDUUUUDUDDDUDDUUUDDDDUDDDUDDDUUDDDDUUDDDUDDDUUUUUUDUDUUDUUDUDDDUDUUDDUDDDDUDUDUUUUUUUUUU";
        int actualValleyCount = CountingValley.countValleyTraverse(path);
        int expectedValleyCount = 18;
        Assertions.assertEquals(actualValleyCount, expectedValleyCount);
    }
}
